on: [push]

jobs:
  setup_nextcloud:
    runs-on: ubuntu-latest
    name: Run e2e test
    strategy:
      matrix:
        api-level: [ 24, 25, 26, 27, 28, 29 ]
        nextcloud-version: [ 'nextcloud:latest', 'nextcloud:stable', 'nextcloud:production' ]
    services:
      nextcloud:
        image: ${{ matrix.nextcloud-version }}
        env:
          SQLITE_DATABASE: db.sqlite
          NEXTCLOUD_ADMIN_USER: Test
          NEXTCLOUD_ADMIN_PASSWORD: Test
        ports:
          - 8080:80
        options: >-
          --health-cmd "curl GET 'http://Test:Test@localhost:80/ocs/v2.php/apps/serverinfo/api/v1/info' -f -H 'OCS-APIRequest: true' || exit 1"
          --health-interval 1s
          --health-timeout 2s
          --health-retries 10
          --health-start-period 3s
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: List running Docker containers
        run: |
          docker ps
          echo "Current docker container ID: `docker ps -f 'name=_nextcloud' -l -q`"

      - name: Print Container information
        run: |
          docker exec `docker ps -f 'name=_nextcloud' -l -q` bash -c 'whoami'
          docker exec `docker ps -f 'name=_nextcloud' -l -q` bash -c 'uname -a'

      - name: Enable Deck via Docker Exec
        run: |
          docker exec `docker ps -f 'name=_nextcloud' -l -q` bash -c 'runuser -u www-data -- php occ app:install deck'

      - name: Fetch capabilities
        run: |
          curl -X GET 'http://Test:Test@localhost:8080/ocs/v2.php/cloud/capabilities?format=json' -H 'OCS-APIRequest: true' | jq

      - name: Fetch server info
        run: |
          curl -X GET 'http://Test:Test@localhost:8080/ocs/v2.php/apps/serverinfo/api/v1/info?format=json' -H 'OCS-APIRequest: true' | jq

      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      - name: AVD cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: echo "Generated AVD snapshot for caching."

      - name: Run e2e tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            adb shell pm uninstall -k --user 0 com.nextcloud.android.beta || true
            adb shell pm uninstall -k --user 0 it.niedermann.nextcloud.deck.dev || true
            wget -q https://download.nextcloud.com/android/dev/latest.apk
            adb install latest.apk
            sleep 10s
            adb logcat -c || true
            adb logcat *:I -v color &
            ./gradlew connectedDebugAndroidTest || true

      - name: List files
        run: |
          ls -all
          ls -all app
          ls -all app/build
          ls -all app/build/reports

      - name: Upload Reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Test-Reports
          path: app/build/reports
      #- name: Upload screenshots
      #  if: always()
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: Screenshots
      #    path: screenshots
